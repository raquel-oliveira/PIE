#ifndef _TABLE_H_
#define _TABLE_H_

#include <unordered_map>
#include <utility>

enum NonTerminals {
    PROG = 500,
    DECL,
    CONSTS,
    LISTCONST,
    LISTCONSTPRIME,
    CONSTDECL,
    TYPES,
    TYPESPRIME,
    PRIMTYPES,
    PRIMTYPESPRIME,
    ARRAYTYPE,
    SUBRANGELIST,
    SUBRANGELISTPRIME,
    SUBRANGETYPE,
    SETTYPE,
    ENUMTYPE,
    RECORDTYPE,
    USERTYPES,
    LISTUSERTYPES,
    LISTUSERTYPESPRIME,
    USERTYPE,
    VARS,
    VARLISTLIST,
    VARLISTLISTPRIME,
    VARLIST,
    IDLIST,
    IDLISTPRIME,
    IDATTR,
    VARIABLE,
    VARIABLEPRIME,
    BLOCK,
    STMTS,
    STMTLISTPRIME,
    STMT,
    STMTPRIME,
    SUBPROGCALL,
    EXISTSTMT,
    RETURNSTMT,
    ATTRSTMT,
    ATTRSTMTPRIME,
    IFBLOCK,
    ELSEBLOCK,
    LOOPBLOCK,
    CASEBLOCK,
    CASEBLOCKPRIME,
    CASELIST,
    LITERALLIST,
    LISTERALLISTPRIME,
    GOTOSTMT,
    FORBLOCK,
    FORBLOCKPRIME,
    EXPR,
    DISJ,
    FINAL-TERM,
    FINAL-TERMPRIME,
    ADD-OP,
    MUL-OP,
    EQUALITY-OP,
    RELATIONAL-OP,
    CONJ,
    CONJPRIME,
    COMP,
    COMPPRIME,
    RELATIONAL,
    RELATIONALPRIME,
    SUM,
    SUMPRIME,
    NEG,
    MUL,
    MULPRIME,
    LITERAL,
    EXPRLIST,
    EXPRLISTPLUS,
    EXPRLISTPLUSPRIME,
    SUBPROGRAMS,
    SUBPROGRAMSPRIME,
    PROCEDURE,
    FUNCTION,
    PARAM,
    WRITESTMT,
    WRITELNSTMT,
    READSTMT,
    READLNSTMT
 };

std::unordered_map<std::pair<int, int>, int[]> table;


void initTable() {
	table[{PROG,PROGRAM_TOKEN}] = {'.', BLOCK, ';', ID_TOKEN, PROGRAM_TOKEN};
}

#endif